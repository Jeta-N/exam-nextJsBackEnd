// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using examNextJsBackEnd.Entities;

#nullable disable

namespace examNextJsBackEnd.Entities.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230417104306_update-account")]
    partial class updateaccount
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.16");

            modelBuilder.Entity("examNextJsBackEnd.Entities.Cart", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("RestaurantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("examNextJsBackEnd.Entities.CartDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodItemId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("FoodItemId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("examNextJsBackEnd.Entities.FoodItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<string>("RestaurantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("FoodItems");

                    b.HasData(
                        new
                        {
                            Id = "01GY7CZ9TQCV2XVZ5KMHYYJKA9",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8283), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Food A Restaurant A",
                            Price = 50000m,
                            RestaurantId = "01GY6PXNZBB0JSS61Q2JDBBJJJ"
                        },
                        new
                        {
                            Id = "01GY7CZ9TQJGT2QTMGZEAMS3R8",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8287), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Food B Restaurant A",
                            Price = 25000m,
                            RestaurantId = "01GY6PXNZBB0JSS61Q2JDBBJJJ"
                        },
                        new
                        {
                            Id = "01GY7CZ9TQK149N6AHX9CXRR59",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8297), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Food A Restaurant B",
                            Price = 28000m,
                            RestaurantId = "01GY6PXNZBCNQCQGZ7KQSG7F84"
                        },
                        new
                        {
                            Id = "01GY7CZ9TQ60DB2YM44N882XCR",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8304), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Food B Restaurant B",
                            Price = 45000m,
                            RestaurantId = "01GY6PXNZBCNQCQGZ7KQSG7F84"
                        },
                        new
                        {
                            Id = "01GY7CZ9TQJXE1RN39KNQ2ZVHB",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8312), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Food A Restaurant C",
                            Price = 58000m,
                            RestaurantId = "01GY6Q8FKXS2QB405HFMV8MVT2"
                        },
                        new
                        {
                            Id = "01GY7CZ9TQP6XG0SK3N8WJ0BMQ",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8315), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Food B Restaurant C",
                            Price = 35000m,
                            RestaurantId = "01GY6Q8FKXS2QB405HFMV8MVT2"
                        },
                        new
                        {
                            Id = "01GY7CZ9TQAG6GEPM69PDW88Y8",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8292), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Drink A Restaurant A",
                            Price = 5000m,
                            RestaurantId = "01GY6PXNZBB0JSS61Q2JDBBJJJ"
                        },
                        new
                        {
                            Id = "01GY7CZ9TQ5C6AEB7SKTXHJ7GF",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8295), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Drink B Restaurant A",
                            Price = 10000m,
                            RestaurantId = "01GY6PXNZBB0JSS61Q2JDBBJJJ"
                        },
                        new
                        {
                            Id = "01GY7CZ9TQM3Z7EX14B4WZDDEG",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8307), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Drink A Restaurant B",
                            Price = 15000m,
                            RestaurantId = "01GY6PXNZBCNQCQGZ7KQSG7F84"
                        },
                        new
                        {
                            Id = "01GY7CZ9TQT3009995NGZCQAMF",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8310), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Drink B Restaurant B",
                            Price = 25000m,
                            RestaurantId = "01GY6PXNZBCNQCQGZ7KQSG7F84"
                        },
                        new
                        {
                            Id = "01GY7CZ9TQ6E7FGEJBC5MMT80Z",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8317), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Drink A Restaurant C",
                            Price = 17000m,
                            RestaurantId = "01GY6Q8FKXS2QB405HFMV8MVT2"
                        },
                        new
                        {
                            Id = "01GY7CZ9TQVCPKQMDV58JXDTSF",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8319), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "Drink B Restaurant C",
                            Price = 27000m,
                            RestaurantId = "01GY6Q8FKXS2QB405HFMV8MVT2"
                        });
                });

            modelBuilder.Entity("examNextJsBackEnd.Entities.Restaurant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = "01GY6PXNZBB0JSS61Q2JDBBJJJ",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8139), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "McDonalds"
                        },
                        new
                        {
                            Id = "01GY6PXNZBCNQCQGZ7KQSG7F84",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8162), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "KFC"
                        },
                        new
                        {
                            Id = "01GY6Q8FKXS2QB405HFMV8MVT2",
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 4, 17, 17, 43, 6, 199, DateTimeKind.Unspecified).AddTicks(8164), new TimeSpan(0, 7, 0, 0, 0)),
                            Name = "A&W"
                        });
                });

            modelBuilder.Entity("examNextJsBackEnd.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Xml")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("TEXT");

                    b.Property<string>("Permissions")
                        .HasColumnType("TEXT");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("TEXT");

                    b.Property<string>("Requirements")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("OpenIddictApplications", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scopes")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreScope", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Descriptions")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<string>("Resources")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OpenIddictScopes", (string)null);
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthorizationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Payload")
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId")
                        .IsUnique();

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", (string)null);
                });

            modelBuilder.Entity("examNextJsBackEnd.Entities.Cart", b =>
                {
                    b.HasOne("examNextJsBackEnd.Entities.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("examNextJsBackEnd.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("examNextJsBackEnd.Entities.CartDetail", b =>
                {
                    b.HasOne("examNextJsBackEnd.Entities.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("examNextJsBackEnd.Entities.FoodItem", "FoodItem")
                        .WithMany("CartDetails")
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("FoodItem");
                });

            modelBuilder.Entity("examNextJsBackEnd.Entities.FoodItem", b =>
                {
                    b.HasOne("examNextJsBackEnd.Entities.Restaurant", "Restaurants")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurants");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Authorizations")
                        .HasForeignKey("ApplicationId");

                    b.Navigation("Application");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreToken", b =>
                {
                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", "Application")
                        .WithMany("Tokens")
                        .HasForeignKey("ApplicationId");

                    b.HasOne("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", "Authorization")
                        .WithMany("Tokens")
                        .HasForeignKey("AuthorizationId");

                    b.Navigation("Application");

                    b.Navigation("Authorization");
                });

            modelBuilder.Entity("examNextJsBackEnd.Entities.FoodItem", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("examNextJsBackEnd.Entities.User", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreApplication", b =>
                {
                    b.Navigation("Authorizations");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("OpenIddict.EntityFrameworkCore.Models.OpenIddictEntityFrameworkCoreAuthorization", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
